// Miguel Ramos, 2012.
// vim: set et sw=4 sts=4 ts=8:

// This kernel is meant for a 1-D domain with one group.
CALL: COUNT(1) ADDR(@factorial);

MEM_RAT_CACHELESS:
    RAT_ID(0) RAT_INST.EXPORT_RAT_INST_STORE_RAW TYPE(1) RW_GPR(0) INDEX_GPR(0) ELEM_SIZE(0)
    COMP_MASK(2) BARRIER END_OF_PROGRAM;

@factorial
ALU_PUSH_BEFORE: BARRIER;
    PRED_SETGE_UINT: UPDATE_PRED UPDATE_EXEC_MASK
        SRC0_SEL.ALU_SRC_1_INT
        SRC1_SEL.GPR(0) SRC1_CHAN.CHAN_X LAST;
    ADD_INT: DST_GPR(0) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_M_1_INT PRED_SEL.PRED_SEL_ZERO;
    MOV: DST_GPR(0) DST_CHAN.CHAN_Y
        SRC0_SEL.ALU_SRC_1_INT PRED_SEL.PRED_SEL_ONE LAST;

JUMP: POP_COUNT(1) ADDR(@return);

CALL: COUNT(1) ADDR(@factorial);

ALU_POP_AFTER: BARRIER;
    ADD_INT: DST_GPR(0) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_1_INT PRED_SEL.PRED_SEL_ZERO LAST;
    MUL_UINT24: DST_GPR(0) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(0) SRC1_CHAN.CHAN_Y LAST;

@return
RETURN: BARRIER;

end;
