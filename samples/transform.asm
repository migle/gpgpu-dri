// Miguel Ramos, 2012.
// vim: set et sw=4 sts=4 ts=8:

// This CS is meant for a 1-D domain.
// It expects the following resources to be set up:
//  constant buffer 0:
//      items per group x, 1, 1, 0
//      number of groups X, 1, 1, 0
//      mat(0,0) mat(0,1) mat(0,2) mat(0,3)
//      mat(1,0) mat(1,1) mat(1,2) mat(1,3)
//      mat(2,0) mat(2,1) mat(2,2) mat(2,3)
//      mat(3,0) mat(3,1) mat(3,2) mat(3,3)
//
//  RAT resource 0 (output buffer) with 4 floats per work-item.
//  VTX resource 0 (intput buffer) with 4 floats per work-item.

ALU: KCACHE_BANK0(0) KCACHE_MODE0.CF_KCACHE_LOCK_1 BARRIER;

    // PV.[xyzw] <- local_ID.[xyzw] * local_stride.[xyzw]
    MUL_UINT24: DST_CHAN.CHAN_X
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_X
        SRC1_SEL.Kcache_bank0(0) SRC1_CHAN.CHAN_X;
    MUL_UINT24: DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_Y
        SRC1_SEL.Kcache_bank0(0) SRC1_CHAN.CHAN_Y;
    MUL_UINT24: DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_Z
        SRC1_SEL.Kcache_bank0(0) SRC1_CHAN.CHAN_Z;
    MUL_UINT24: DST_CHAN.CHAN_W
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_W
        SRC1_SEL.Kcache_bank0(0) SRC1_CHAN.CHAN_W LAST;

    // R0.z <- sum(PV.[xyzw])
    ADD_INT: DST_CHAN.CHAN_X
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Y;
    ADD_INT: DST_CHAN.CHAN_Y
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_Z
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_W LAST;
    ADD_INT:
        DST_GPR(0) DST_CHAN.CHAN_Z
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Y WRITE_MASK LAST;

    // PV.[xyzw] <- group_ID.[xyzw] * group_stride.[xyzw]
    MUL_UINT24: DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.Kcache_bank0(1) SRC1_CHAN.CHAN_X;
    MUL_UINT24: DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.Kcache_bank0(1) SRC1_CHAN.CHAN_Y;
    MUL_UINT24: DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.Kcache_bank0(1) SRC1_CHAN.CHAN_Z;
    MUL_UINT24: DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_W
        SRC1_SEL.Kcache_bank0(1) SRC1_CHAN.CHAN_W LAST;

    // R0.y <- sum(PV.[xyzw])
    ADD_INT: DST_CHAN.CHAN_X
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Y;
    ADD_INT: DST_CHAN.CHAN_Y
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_Z
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_W LAST;
    ADD_INT:
        DST_GPR(0) DST_CHAN.CHAN_Y
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Y WRITE_MASK LAST;

    // R0.x <- R0.y + R0.z
    ADD_INT:
        DST_GPR(0) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(0) SRC1_CHAN.CHAN_Z WRITE_MASK LAST;

ALU: KCACHE_BANK0(1) KCACHE_MODE0.CF_KCACHE_LOCK_1 BARRIER;

    // Load our matrix into R4-R7.
    MOV: DST_GPR(2) DST_CHAN.CHAN_X
        SRC0_SEL.Kcache_bank0(2) SRC0_CHAN.CHAN_X WRITE_MASK;
    MOV: DST_GPR(2) DST_CHAN.CHAN_Y
        SRC0_SEL.Kcache_bank0(2) SRC0_CHAN.CHAN_Y WRITE_MASK;
    MOV: DST_GPR(2) DST_CHAN.CHAN_Z
        SRC0_SEL.Kcache_bank0(2) SRC0_CHAN.CHAN_Z WRITE_MASK;
    MOV: DST_GPR(2) DST_CHAN.CHAN_W
        SRC0_SEL.Kcache_bank0(2) SRC0_CHAN.CHAN_W WRITE_MASK LAST;

    MOV: DST_GPR(3) DST_CHAN.CHAN_X
        SRC0_SEL.Kcache_bank0(3) SRC0_CHAN.CHAN_X WRITE_MASK;
    MOV: DST_GPR(3) DST_CHAN.CHAN_Y
        SRC0_SEL.Kcache_bank0(3) SRC0_CHAN.CHAN_Y WRITE_MASK;
    MOV: DST_GPR(3) DST_CHAN.CHAN_Z
        SRC0_SEL.Kcache_bank0(3) SRC0_CHAN.CHAN_Z WRITE_MASK;
    MOV: DST_GPR(3) DST_CHAN.CHAN_W
        SRC0_SEL.Kcache_bank0(3) SRC0_CHAN.CHAN_W WRITE_MASK LAST;

    MOV: DST_GPR(4) DST_CHAN.CHAN_X
        SRC0_SEL.Kcache_bank0(4) SRC0_CHAN.CHAN_X WRITE_MASK;
    MOV: DST_GPR(4) DST_CHAN.CHAN_Y
        SRC0_SEL.Kcache_bank0(4) SRC0_CHAN.CHAN_Y WRITE_MASK;
    MOV: DST_GPR(4) DST_CHAN.CHAN_Z
        SRC0_SEL.Kcache_bank0(4) SRC0_CHAN.CHAN_Z WRITE_MASK;
    MOV: DST_GPR(4) DST_CHAN.CHAN_W
        SRC0_SEL.Kcache_bank0(4) SRC0_CHAN.CHAN_W WRITE_MASK LAST;

    MOV: DST_GPR(5) DST_CHAN.CHAN_X
        SRC0_SEL.Kcache_bank0(5) SRC0_CHAN.CHAN_X WRITE_MASK;
    MOV: DST_GPR(5) DST_CHAN.CHAN_Y
        SRC0_SEL.Kcache_bank0(5) SRC0_CHAN.CHAN_Y WRITE_MASK;
    MOV: DST_GPR(5) DST_CHAN.CHAN_Z
        SRC0_SEL.Kcache_bank0(5) SRC0_CHAN.CHAN_Z WRITE_MASK;
    MOV: DST_GPR(5) DST_CHAN.CHAN_W
        SRC0_SEL.Kcache_bank0(5) SRC0_CHAN.CHAN_W WRITE_MASK LAST;

ALU: BARRIER;

    // Finally, some FLOPS.
    MUL:
        DST_GPR(6) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(2) SRC1_CHAN.CHAN_X WRITE_MASK;
    MUL:
        DST_GPR(6) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(2) SRC1_CHAN.CHAN_Y WRITE_MASK;
    MUL:
        DST_GPR(6) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(2) SRC1_CHAN.CHAN_Z WRITE_MASK;
    MUL:
        DST_GPR(6) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(2) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    MUL:
        DST_GPR(7) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(3) SRC1_CHAN.CHAN_X WRITE_MASK;
    MUL:
        DST_GPR(7) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(3) SRC1_CHAN.CHAN_Y WRITE_MASK;
    MUL:
        DST_GPR(7) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(3) SRC1_CHAN.CHAN_Z WRITE_MASK;
    MUL:
        DST_GPR(7) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(3) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    MUL:
        DST_GPR(8) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(4) SRC1_CHAN.CHAN_X WRITE_MASK;
    MUL:
        DST_GPR(8) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(4) SRC1_CHAN.CHAN_Y WRITE_MASK;
    MUL:
        DST_GPR(8) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(4) SRC1_CHAN.CHAN_Z WRITE_MASK;
    MUL:
        DST_GPR(8) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(4) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    MUL:
        DST_GPR(9) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(5) SRC1_CHAN.CHAN_X WRITE_MASK;
    MUL:
        DST_GPR(9) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(5) SRC1_CHAN.CHAN_Y WRITE_MASK;
    MUL:
        DST_GPR(9) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(5) SRC1_CHAN.CHAN_Z WRITE_MASK;
    MUL:
        DST_GPR(9) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(5) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    ADD:
        DST_GPR(6) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(7) SRC1_CHAN.CHAN_X WRITE_MASK;
    ADD:
        DST_GPR(6) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(7) SRC1_CHAN.CHAN_Y WRITE_MASK;
    ADD:
        DST_GPR(6) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(7) SRC1_CHAN.CHAN_Z WRITE_MASK;
    ADD:
        DST_GPR(6) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(7) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    ADD:
        DST_GPR(8) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(8) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(9) SRC1_CHAN.CHAN_X WRITE_MASK;
    ADD:
        DST_GPR(8) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(8) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(9) SRC1_CHAN.CHAN_Y WRITE_MASK;
    ADD:
        DST_GPR(8) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(8) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(9) SRC1_CHAN.CHAN_Z WRITE_MASK;
    ADD:
        DST_GPR(8) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(8) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(9) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    ADD:
        DST_GPR(1) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_X
        SRC1_SEL.GPR(8) SRC1_CHAN.CHAN_X WRITE_MASK;
    ADD:
        DST_GPR(1) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_Y
        SRC1_SEL.GPR(8) SRC1_CHAN.CHAN_Y WRITE_MASK;
    ADD:
        DST_GPR(1) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_Z
        SRC1_SEL.GPR(8) SRC1_CHAN.CHAN_Z WRITE_MASK;
    ADD:
        DST_GPR(1) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(6) SRC0_CHAN.CHAN_W
        SRC1_SEL.GPR(8) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

MEM_RAT_CACHELESS:
    RAT_ID(11) RAT_INST.EXPORT_RAT_INST_STORE_RAW TYPE(1) RW_GPR(1) INDEX_GPR(0) ELEM_SIZE(3)
    COMP_MASK(15) BARRIER;

NOP: BARRIER END_OF_PROGRAM;

end;
