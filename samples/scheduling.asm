// Miguel Ramos, 2012.
// vim: set et sw=4 sts=4 ts=8:

// We have the [xyz] strides in the constant cache.
// We want to compute a linearized local_ID.
ALU: KCACHE_BANK0(0) KCACHE_MODE0.CF_KCACHE_LOCK_1 BARRIER;

    // R2.xyzw <- local_ID.xyzw * local_stride.xyzw
    MUL_UINT24: DST_GPR(2) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_X
        SRC1_SEL.Kcache_bank0(4) SRC1_CHAN.CHAN_X WRITE_MASK;
    MUL_UINT24: DST_GPR(2) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_Y
        SRC1_SEL.Kcache_bank0(4) SRC1_CHAN.CHAN_Y WRITE_MASK;
    MUL_UINT24: DST_GPR(2) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_Z
        SRC1_SEL.Kcache_bank0(4) SRC1_CHAN.CHAN_Z WRITE_MASK;
    MUL_UINT24: DST_GPR(2) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(0) SRC0_CHAN.CHAN_W
        SRC1_SEL.Kcache_bank0(4) SRC1_CHAN.CHAN_W WRITE_MASK LAST;

    // PV.xyzw <- group_ID.xyzw * group_stride.xyzw
    MUL_UINT24: DST_GPR(3) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.Kcache_bank0(5) SRC1_CHAN.CHAN_X;
    MUL_UINT24: DST_GPR(3) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.Kcache_bank0(5) SRC1_CHAN.CHAN_Y;
    MUL_UINT24: DST_GPR(3) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.Kcache_bank0(5) SRC1_CHAN.CHAN_Z;
    MUL_UINT24: DST_GPR(3) DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_W
        SRC1_SEL.Kcache_bank0(5) SRC1_CHAN.CHAN_W LAST;

    // PV.xyzw <- R2.xyzw + PV.xyzw
    ADD_INT: DST_CHAN.CHAN_X
        SRC0_SEL.GPR(2) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_X;
    ADD_INT: DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(2) SRC0_CHAN.CHAN_Y
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Y;
    ADD_INT: DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(2) SRC0_CHAN.CHAN_Z
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Z;
    ADD_INT: DST_CHAN.CHAN_W
        SRC0_SEL.GPR(2) SRC0_CHAN.CHAN_W
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_W LAST;

    // R2.x <- sum(PV.xyzw), R2.yzw <- 0
    ADD_INT: DST_CHAN.CHAN_X
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Y;
    ADD_INT: DST_CHAN.CHAN_Z
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_Z
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_W LAST;
    ADD_INT: DST_GPR(2) DST_CHAN.CHAN_X
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_Z WRITE_MASK;
    MOV: DST_GPR(2) DST_CHAN.CHAN_Y
        SRC0_SEL.ALU_SRC_0 WRITE_MASK;
    MOV: DST_GPR(2) DST_CHAN.CHAN_Z
        SRC0_SEL.ALU_SRC_0 WRITE_MASK;
    MOV: DST_GPR(2) DST_CHAN.CHAN_W
        SRC0_SEL.ALU_SRC_0 WRITE_MASK LAST;

    // Let's prepare our output R3 with interesting stuff.

    // R3.x <- R1.x << 24, PV.w <- R1.y << 16, PS <- R1.z << 8
    // R3.y <- SIMD_ID << 16, R3.z <- HW_THREADGRP_ID << 16
    LSHL_INT: DST_GPR(3) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_X WRITE_MASK;
    LSHL_INT: DST_GPR(3) DST_CHAN.CHAN_Y
        SRC0_SEL.ALU_SRC_SIMD_ID
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_Y WRITE_MASK;
    LSHL_INT: DST_GPR(3) DST_CHAN.CHAN_Z
        SRC0_SEL.ALU_SRC_WAVE_ID_IN_GRP
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_Y WRITE_MASK;
    LSHL_INT: DST_CHAN.CHAN_W
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Y
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_Y;
    LSHL_INT: DST_CHAN.CHAN_X
        SRC0_SEL.GPR(1) SRC0_CHAN.CHAN_Z
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_Z LAST;
    0x00000018 0x00000010;
    0x00000008 0x00000000;

    // PV.x <- PS | PV.w
    OR_INT: DST_CHAN.CHAN_X
        SRC0_SEL.ALU_SRC_PS
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_W LAST;
    // PV.x <- R3.x | PV.x
    OR_INT: DST_CHAN.CHAN_X
        SRC0_SEL.GPR(3) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_PV SRC1_CHAN.CHAN_X LAST;

    // R3.x <- (R1.x << 24) | (R1.y << 16) | (R1.z << 8) | HW_ALU_ODD
    // R3.y <- (SIMD_ID << 16) | HW_THREADGRP_ID
    // R3.z <- (WAVE_ID_IN_GRP << 16) | HW_WAVE_ID
    // R3.w <- TIME_LO
    OR_INT: DST_GPR(3) DST_CHAN.CHAN_X
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_HW_ALU_ODD WRITE_MASK;
    OR_INT: DST_GPR(3) DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(3) SRC0_CHAN.CHAN_Y
        SRC1_SEL.ALU_SRC_HW_THREADGRP_ID WRITE_MASK;
    OR_INT: DST_GPR(3) DST_CHAN.CHAN_Z
        SRC0_SEL.GPR(3) SRC0_CHAN.CHAN_Z
        SRC1_SEL.ALU_SRC_HW_WAVE_ID WRITE_MASK;
    MOV: DST_GPR(3) DST_CHAN.CHAN_W
        SRC0_SEL.ALU_SRC_TIME_LO WRITE_MASK LAST;

    // if (R2.x % 64 == 0), R2.x <- R2.x << 6
    LSHR_INT: DST_GPR(2) DST_CHAN.CHAN_X
        SRC0_SEL.GPR(2) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_X WRITE_MASK;
    AND_INT: DST_CHAN.CHAN_Y
        SRC0_SEL.GPR(2) SRC0_CHAN.CHAN_X
        SRC1_SEL.ALU_SRC_LITERAL SRC1_CHAN.CHAN_Y LAST;
    0x00000006 0x0000003f;
    PREDE_INT:
        SRC0_SEL.ALU_SRC_PV SRC0_CHAN.CHAN_Y
        SRC1_SEL.ALU_SRC_0 LAST UPDATE_PRED UPDATE_EXEC_MASK;

// rat0[R2.x].xyzw <- R3.xyzw
MEM_RAT_CACHELESS:
    RAT_ID(0) RAT_INST.EXPORT_RAT_INST_STORE_RAW TYPE(1) RW_GPR(3) INDEX_GPR(2) ELEM_SIZE(3)
    COMP_MASK(15) BARRIER END_OF_PROGRAM;

end;
